/**
 * Integration Test Runner and Reporter
 *
 * This script runs all integration tests and generates a comprehensive report
 * including production readiness score.
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const REPORT_PATH = path.join(__dirname, 'integration-test-report.json');
const MARKDOWN_REPORT = path.join(__dirname, 'integration-test-report.md');

console.log('========================================');
console.log('POULTRY360 INTEGRATION TEST EXECUTION');
console.log('========================================\n');
console.log('Backend API: http://192.168.50.21:3000/api');
console.log('Test Environment: Development\n');
console.log('Starting test execution...\n');

// Test execution results
const results = {
  timestamp: new Date().toISOString(),
  environment: 'development',
  apiUrl: 'http://192.168.50.21:3000/api',
  phases: [],
  totalTests: 0,
  passedTests: 0,
  failedTests: 0,
  skippedTests: 0,
  duration: 0,
  productionReadinessScore: 0,
  criticalIssues: [],
  recommendations: [],
};

const startTime = Date.now();

try {
  // Run integration tests
  const output = execSync('npm run test:integration', {
    cwd: path.join(__dirname, '..', '..'),
    encoding: 'utf-8',
    stdio: 'pipe'
  });

  console.log(output);

  // Parse Jest output to extract test results
  const testSummary = output.match(/Tests:.*$/m);
  if (testSummary) {
    console.log('\n' + testSummary[0]);
  }

  results.passedTests = (output.match(/✓/g) || []).length;
  results.totalTests = results.passedTests;
  results.duration = Date.now() - startTime;

} catch (error) {
  console.error('\n❌ Integration tests failed\n');
  console.error(error.stdout || error.message);

  const output = error.stdout || error.message;
  results.failedTests = (output.match(/✕/g) || []).length;
  results.passedTests = (output.match(/✓/g) || []).length;
  results.totalTests = results.passedTests + results.failedTests;
  results.duration = Date.now() - startTime;
}

// Calculate production readiness score
const passRate = results.totalTests > 0 ? (results.passedTests / results.totalTests) * 100 : 0;
results.productionReadinessScore = Math.round(passRate);

// Generate recommendations
if (results.failedTests > 0) {
  results.criticalIssues.push(`${results.failedTests} tests failed - requires immediate attention`);
  results.recommendations.push('Fix all failing tests before production deployment');
}

if (passRate < 80) {
  results.recommendations.push('Increase test pass rate to at least 80% for production readiness');
}

if (passRate >= 95) {
  results.recommendations.push('Production ready - all critical tests passing');
}

// Save results
fs.writeFileSync(REPORT_PATH, JSON.stringify(results, null, 2));

// Generate Markdown report
const markdown = `# Poultry360 Mobile App Integration Test Report

**Generated:** ${new Date().toLocaleString()}
**Test Duration:** ${(results.duration / 1000).toFixed(2)}s
**Environment:** ${results.environment}
**API Endpoint:** ${results.apiUrl}

## Executive Summary

- **Total Tests:** ${results.totalTests}
- **Passed:** ${results.passedTests} ✓
- **Failed:** ${results.failedTests} ✗
- **Pass Rate:** ${passRate.toFixed(1)}%
- **Production Readiness Score:** ${results.productionReadinessScore}/100

## Test Results

${results.passedTests > 0 ? `### ✓ Passed Tests: ${results.passedTests}` : ''}

${results.failedTests > 0 ? `### ✗ Failed Tests: ${results.failedTests}
**Status:** ⚠️ REQUIRES ATTENTION
` : ''}

## Production Readiness Assessment

**Score: ${results.productionReadinessScore}/100**

${results.productionReadinessScore >= 95 ? '✅ **PRODUCTION READY**' : ''}
${results.productionReadinessScore >= 80 && results.productionReadinessScore < 95 ? '⚠️ **READY WITH MINOR ISSUES**' : ''}
${results.productionReadinessScore < 80 ? '❌ **NOT PRODUCTION READY**' : ''}

## Critical Issues

${results.criticalIssues.length > 0 ? results.criticalIssues.map(issue => `- ❌ ${issue}`).join('\n') : '- ✅ No critical issues found'}

## Recommendations

${results.recommendations.map(rec => `- ${rec}`).join('\n')}

## Next Steps

${results.failedTests > 0 ? `
1. Review failed test logs above
2. Fix identified integration issues
3. Re-run integration tests
4. Ensure 95%+ pass rate before production deployment
` : `
1. ✅ All tests passing
2. Monitor production deployment
3. Set up automated integration testing in CI/CD
`}

---
*Generated by Poultry360 Integration Test Suite*
`;

fs.writeFileSync(MARKDOWN_REPORT, markdown);

console.log('\n========================================');
console.log('INTEGRATION TEST RESULTS');
console.log('========================================\n');
console.log(`Total Tests: ${results.totalTests}`);
console.log(`Passed: ${results.passedTests} ✓`);
console.log(`Failed: ${results.failedTests} ✗`);
console.log(`Pass Rate: ${passRate.toFixed(1)}%`);
console.log(`Duration: ${(results.duration / 1000).toFixed(2)}s`);
console.log(`\nProduction Readiness Score: ${results.productionReadinessScore}/100`);
console.log(`\nReport saved to: ${MARKDOWN_REPORT}\n`);

process.exit(results.failedTests > 0 ? 1 : 0);
